Introduction
============

1. What is the eZ Extension Builder?
------------------------------------

A set of php files and tools to "build" eZ Publish extensions and deliverables.
It is based on the Pake tool.

Since eZ Publish extensions are not compiled programs, the build process consists
of steps such as:
- checking for some files to be in place (eg. licensing info, or db structure creation scripts)
- replacing some token strings inside some specific files (eg. version nr.)
- generating end-user documentation form documentation sources (eg.html from rst files)
- creating tarballs of the extension

2. License
----------

This software is licensed under the GNU General Public License v2.0 . The
complete license agreement is included in the LICENSE file. For more information
or questions please contact info@ez.no

3. Requirements
---------------

- the php cli
- Pake version 1.6.1 or later.
  You can get it either from https://github.com/indeyets/pake/wiki
  or as part of the extension itself, the first time you run the pakefile.php script
- the Zeta Components php library (only for generating tarballs and html docs from rst)
- command line tools: svn and/or git, doxygen

4. Installing
-------------

Read the INSTALL file to get started


Directory structure
===================

Let's call ROOT_DIR the directory where you will be running the build script.
This directory will usually be the top-level directory of your extension, but
it can in fact be anywhere else.::

ROOT_DIR/
 |___pakefile.php this is the script driving the build
 |___build/myext  a copy of the extension myext will be downloaded here during the build
 |                (if you plan to produce an ezpackage out of the extension,
 |                this dircetory will change to build/ezextension/myextension)
 |___dist/        tarballs produced by the build will be made available here
 `___pake/
     |___doc/     more documentation, such as changelogs, todos and known bugs
     |___src/     a complete copy of the pake tool
     |___README   this file
     |___INSTALL  installation instructions
     |___LICENSE  license file
     |___doxyfile_master configuration file used when the generate-documentation task is set to create api docs via doxygen
     |___options-ezextensionbuilder.yaml configuration file used to build this extension itself
     |___options-sample.yaml a sample configuration file
     `___package_master.tpl template file used by the generate-sample-package-file task

As you can see, we try to pollute as little as possible the ROOT_DIR: everything
is neatly stowed away in the pake, build and dist subdirectories.


FAQ
===

- Can a standalone copy of pake be used with the pakefile instead of the bundled one?
    Yes: just use a different command line: ::
    php pake.php build myext

- Can multiple extensions be built in the same ROOT_DIR?
    Yes. Just create an option file for each

- Can the script use my previous configuration files used with the ant-based version?
    Yes. Use the convert-configuration task for converting them to the new format

- Can I download a complete zip of the tool instead of doing the bootstrap?
    Yes. Come back later for a list of urls to use ;-)

- Interaction with git/svn: which files to commit in my repo, which ones not?
    If you plan to build in the root dir of your extension, you can very easily
    add a single file to your versioned source code:
    ./pake/options-myextension.yaml
    You should configure git / svn to ignore all other files in the pake/
    directory, as well as the complete ./build/ and ./dist/ directories, and the
    ./pakefile.php file

- Help. After building the extension my eZ Publish is not working anymore!
    This is a very rare situation. It might happen if
    . you build the extension within a live eZ Publish installation,
    . you do not clean up the build directory after the build, and
    . you regenerate autoload configuration (eg. by activating or deactivanting an extension)
    What is happening is that the autoload configuration is pointing to php
    classes in files inside the build directory instead of the files in the
    extension itself.
    The fix: just clean up the build dir and regenerate the autoload configuration
