<?xml version="1.0" encoding="iso-8859-1"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="eZExtensionBuilder" default="help">

    <description>eZExtensionBuilder build file</description>

    <!-- ========= -->
    <!-- Ivy Stuff -->
    <!-- ========= -->

    <property name="ivy.install.version" value="2.1.0" />

    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>

    <property name="ivy.home"         value="${user.home}/.ant" />
    <property name="ivy.jar.dir"      value="${ivy.home}/lib" />
    <property name="ivy.jar.file"     value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.download.url" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"/>

    <!-- =================== -->
    <!-- Ivy Stuff : nirvana -->
    <!-- =================== -->

    <!-- ================== -->
    <!-- Build properties   -->
    <!-- ================== -->

    <tstamp>
        <format property="date.now"          pattern="yyyy-mm-dd_hh:mm:ss"/>
        <format property="date.current.year" pattern="yyyy"/>
    </tstamp>

    <property name="build.dir" value="build"/>

    <!-- an extension propertie file must be stored in               -->
    <!-- an 'ant' folder under the root of the extension             -->
    <!-- For example for extension ezoe this gives :                 -->
    <!-- ezoe                                                        -->
    <!--   +ant                                                      -->
    <!--      +-ezoe.properties                                      -->
    <!--                                                             -->
    <!-- the property files must be composed of the                  -->
    <!-- following variables                                         -->
    <!--                                                             -->
    <!-- <extensionname>.version.major     = xxx                     -->
    <!-- <extensionname>.version.minor     = yyy                     -->
    <!-- <extensionname>.version.release   = zzzz                    -->
    <!-- <extensionname>.svn.url           = http://url.com/to/svn/ -->
    <!--                                                             -->
    <property file="./ant/${extension.name}.properties"/>

    <patternset id="php.sources">
        <include name="**/*.php"/>
    </patternset>

    <patternset id="all.sources">
        <include name="**/*.php"/>
        <include name="**/*.css"/>
        <include name="**/*.js"/>
    </patternset>

    <patternset id="rst.sources">
        <include name="**/*.rst"/>
    </patternset>

    <!-- =================== -->
    <!-- /Build properties   -->
    <!-- =================== -->

    <!-- Shows the help message   -->
    <!-- This is default target   -->
    <!-- nothing will be built    -->
    <!-- unless clearly specified -->
    <target name="help" description="Shows this help">
        <echo message="Please run : ant -p to learn more about available targets"/>
        <antcall target="show-properties"/>
    </target>

    <!-- Shows available properties for this build file -->
    <target name="show-properties" description="Shows the properties for this build file">
        <echo message="build.dir        : ${build.dir}"/>

        <!-- extension.name should be defined as a script argument -->
        <!-- ant -Dextension.name=<extensionname>                  -->
        <echo message="extension name   : ${extension.name}"/>
    </target>

    <!-- Prepares the build directory    -->
    <!-- Creates the build/ directory if -->
    <!-- does not already exists         -->
    <target name="init" depends="clean-all,ivy-resolve-dependencies" description="Prepares the extension to be built">
        <!-- http://ant-contrib.sourceforge.net/tasks/tasks/propertycopy.html -->
        <propertycopy name="version.major"   from="${extension.name}.version.major"/>
        <propertycopy name="version.minor"   from="${extension.name}.version.minor"/>
        <propertycopy name="version.release" from="${extension.name}.version.release"/>
        <propertycopy name="version.alias"   from="${extension.name}.version.alias"/>
        <propertycopy name="svn.url"         from="${extension.name}.svn.url" />

        <!--
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${user.home}/.ant/lib/ant-contrib-1.0b3-jar.jar"/>
            </classpath>
        </taskdef>
        -->

        <mkdir dir="${build.dir}"/>

        <!-- svn export repository -->
        <exec executable="svn" failonerror="true">
            <arg value="export"/>
            <arg value="${svn.url}"/>
            <arg value="${build.dir}/${extension.name}"/>
        </exec>
    </target>

    <!-- Builds the extension -->
    <target name="build" depends="init" description="Builds the extension">
        <delete dir="${build.dir}/${extension.name}/ant"/>
        <delete file="${build.dir}/${extension.name}/build.xml"/>
        <delete dir="${build.dir}/${extension.name}/tests"/>

        <antcall target="update-ezinfo"/>
        <antcall target="update-license-headers"/>
        <antcall target="generate-documentation"/>
        <antcall target="generate-md5sums"/>
        <antcall target="check-sql-files"/>
        <antcall target="check-gnu-files"/>
        <antcall target="eznetwork-certify"/>
        <antcall target="generate-ezpackage-xml-definition"/>
        <antcall target="update-package-xml"/>
    </target>

    <!-- Removes the entire build/ directory -->
    <target name="clean" description="Removes the entire build directory">
        <delete dir="${build.dir}"/>
    </target>

    <!-- Removes build/ and dist/ -->
    <target name="clean-all" description="Removes the build/ and the dist/ directory">
        <antcall target="clean"/>
        <antcall target="dist-clean"/>
    </target>

    <!-- Creates a tarball of the latest build -->
    <target name="dist" description="Creates a tarball of the built extension">
        <mkdir dir="dist"/>
        <tar destfile="dist/${extension.name}-${version.alias}.${version.release}.tar.gz"
             compression="gzip"
             longfile="gnu"
             basedir="${build.dir}"/>
    </target>

    <!-- Build the extension and generate the tarball -->
    <target name="all" description="Build the extension and generate the tarball">
        <antcall target="build"/>
        <antcall target="dist"/>
        <antcall target="build-dependencies"/>
    </target>

    <!-- Removes the generated tarball -->
    <target name="dist-clean" description="Removes the generated tarball">
        <delete dir="dist"/>
    </target>

    <!-- Updates ezinfo.php -->
    <target name="update-ezinfo" description="Updates ezinfo.php with correct version numbers">
        <echo message="Updating ezinfo.php"/>

        <replaceregexp byline="true">
            <!-- 'Version' => 'xxxxxx', -->
            <!-- The limit of spaces is set to 25 otherwise 3rd party version strings -->
            <!-- will be replaced as well and we do not want that                     -->
            <regexp pattern="^([\s]{1,25}\047Version\047[\s]+=>[\s]+\047)(.*)(\047,)$"/>
            <substitution expression='\1${version.alias}-${version.release}\3'/>
            <fileset dir="${build.dir}" includes="**/*ezinfo.php"/>
        </replaceregexp>
    </target>

    <!-- Updated the SOFTWARE LICENSE    -->
    <!-- header in each source code file -->
    <target name="update-license-headers" description="Update license headers in source code files">
        <echo message="Updating license headers"/>

        <!-- SOFTWARE RELEASE -->
        <replaceregexp byline="true">
            <regexp pattern="// SOFTWARE RELEASE: (.*)"/>
            <substitution expression="// SOFTWARE RELEASE: ${version.alias}-${version.release}"/>
            <fileset dir="${build.dir}">
                <patternset refid="all.sources"/>
            </fileset>
        </replaceregexp>

        <!-- COPYRIGHT NOTICE -->
        <replaceregexp byline="true">
            <regexp pattern="// COPYRIGHT NOTICE: Copyright \(C\) 1999-[\d]{4} eZ Systems AS"/>
            <substitution expression="// COPYRIGHT NOTICE: Copyright (C) 1999-${date.current.year} eZ Systems AS"/>
            <fileset dir="${build.dir}">
                <patternset refid="all.sources"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- Generates the documentation out of .rst files -->
    <!-- This requires the rst2html.py tool available  -->
    <!-- at : http://docutils.sourceforge.net/         -->
    <target name="generate-documentation" description="Generates the document of the extension, if created in RST">
        <echo message="Building documentation"/>

        <mapper id="rstout"
                type="glob"
                from="${build.dir}/${extension.name}/doc/*.rst"
                to="${build.dir}/${extension.name}/doc/*.html"/>

        <apply executable="rst2html.py" failonerror="true">
            <fileset dir="${build.dir}">
                <patternset refid="rst.sources"/>
            </fileset>
            <srcfile/>
            <redirector>
                <outputmapper refid="rstout"/>
            </redirector>
        </apply>

        <!-- A few extension have Makefiles to generate documentation -->
        <!-- We have to remove them as well as original .rst files    -->
        <delete>
            <fileset dir="${build.dir}">
                <patternset refid="rst.sources"/>
                <include name="Makefile"/>
            </fileset>
        </delete>
    </target>

    <!-- Launch the ezp unit test suite                          -->
    <!-- For more information on how to write                    -->
    <!-- unit tests for an extension please go to                -->
    <!-- http://ezpedia.org/en/ez/testing_ez_publish_test_system -->
    <!-- This is a standalone target, it is not possible to run  -->
    <!-- the unit test site from within the build                -->
    <!-- The developpment of this target is in stand by since we -->
    <!-- have to discuss a few things about login credentials    -->
    <!-- the database first                                      -->
    <target name="tests" description="Launch unit tests if any">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Checks for coding standard for the current extension     -->
    <!-- This requires PHPCodeSniffer for more informations       -->
    <!-- please go to http://pear.php.net/package/PHP_CodeSniffer -->
    <target name="coding-standards-check" description="Checks PHP code coding standard, requires PHPCodeSniffer">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Generates a md5sum file with md5 sums of all source file -->
    <target name="generate-md5sums" description="Generates an MD5 file with all md5 sums of source code files">
        <echo message="Creating MD5 sums"/>

        <mkdir dir="${build.dir}/${extension.name}/share"/>

        <!-- Creates the checksum list -->
        <apply executable="md5sum" failonerror="true" dir="${build.dir}/${extension.name}">
            <fileset dir="${build.dir}/${extension.name}">
                <patternset id="all.sources"/>
            </fileset>
            <srcfile/>
            <redirector output="${build.dir}/${extension.name}/share/filelist.md5" append="true"/>
        </apply>

        <!-- removes the absolute part of the path -->
        <!-- and only let the relative one         -->
        <replaceregexp byline="true">
            <regexp pattern="${user.dir}/${build.dir}/${extension.name}/"/>
            <substitution expression=""/>
            <fileset file="${build.dir}/${extension.name}/share/filelist.md5"/>
        </replaceregexp>
    </target>

    <!-- Checks if a schema.sql file is present for -->
    <!-- any supported database                     -->
    <!--                                            -->
    <!-- The accepted directory structure is :      -->
    <!--                                            -->
    <!-- myextension                                -->
    <!-- `__ sql                                    -->
    <!--     |__ mysql                              -->
    <!--     |   |__ cleandata.sql                  -->
    <!--     |   `__ schema.sql                     -->
    <!--     |__ oracle                             -->
    <!--     |   |__ cleandata.sql                  -->
    <!--     |   `__ schema.sql                     -->
    <!--     `__ postgresql                         -->
    <!--         |__ cleandata.sql                  -->
    <!--         `__ schema.sql                     -->
    <!--                                            -->
    <target name="check-sql-files" description="Checks if a schema.sql / cleandata.sql is available for supported databases">
        <echo message="Checking for schema.sql and cleandata.sql"/>

        <available file="sql"
                   filepath="${build.dir}/${extension.name}"
                   property="sql.dir.exists"/>

        <if>
            <equals arg1="${sql.dir.exists}" arg2="true"/>
            <then>
                <!-- mysql/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/mysql"
                        property="mysql.schema.exists"/>
                <fail unless="mysql.schema.exists" message="sql/mysql/schema.sql file doesn't exist !"/>

                <!-- mysql/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/mysql"
                        property="mysql.cleandata.exists"/>
                <fail unless="mysql.cleandata.exists" message="sql/mysql/cleandata.sql file doesn't exist !"/>

                <!-- postgresql/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/postgresql"
                        property="postgresql.schema.exists"/>
                <fail unless="postgresql.schema.exists" message="sql/postgresql/schema.sql file doesn't exist !"/>

                <!-- postgresql/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/postgresql"
                        property="postgresql.cleandata.exists"/>
                <fail unless="postgresql.cleandata.exists" message="sql/postgresql/cleandata.sql file doesn't exist !"/>

                <!-- oracle/schema.sql -->
                <available file="schema.sql"
                        filepath="${build.dir}/${extension.name}/sql/oracle"
                        property="oracle.schema.exists"/>
                <fail unless="oracle.schema.exists" message="sql/oracle/schema.sql file doesn't exist !"/>

                <!-- oracle/cleandata.sql -->
                <available file="cleandata.sql"
                        filepath="${build.dir}/${extension.name}/sql/oracle"
                        property="oracle.cleandata.exists"/>
                <fail unless="oracle.cleandata.exists" message="sql/oracle/cleandata.sql file doesn't exist !"/>

                <!-- Last but not least, .dba files -->
                <!-- share/db_schema.dba -->
                <available file="db_schema.dba"
                        filepath="${build.dir}/${extension.name}/share/"
                        property="db.schema.dba.exists"/>
                <fail unless="db.schema.dba.exists" message="db_schema.dba file doesn't exist!"/>

                <!-- share/db_schema.dba -->
                <available file="db_data.dba"
                        filepath="${build.dir}/${extension.name}/share/"
                        property="db.data.dba.exists"/>
                <fail unless="db.data.dba.exists" message="db_data.dba file doesn't exist!"/>

            </then>
            <else>
                <echo message="This extension does not do anything on the database, skipping"/>
            </else>
        </if>
    </target>

    <!-- Runs the eZ Network certification utility -->
    <!-- This requires the ez_network extension    -->
    <target name="eznetwork-certify" description="Runs the certification script, requires the latest eZNetwork extension">
        <echo message="Not Implemented Yet"/>
    </target>

    <!-- Checks for the presence of LICENSE and README files -->
    <target name="check-gnu-files" description="Checks for LICENSE and README files">
        <echo message="Checing for LICENSE and README files"/>

        <!-- LICENSE -->
        <available file="LICENSE"
                   filepath="${build.dir}/${extension.name}"
                   property="gnu.license.extension.exists"/>

        <available file="LICENSE"
                filepath="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                property="gnu.license.package.exists"/>

        <if>
            <and>
                <equals arg1="gnu.license.extension.exists" arg2="false"/>
                <equals arg1="gnu.license.package.exists"   arg2="false"/>
            </and>
            <then>
                <fail message="LICENSE file doesn't exist!"/>
            </then>
        </if>

        <!-- README -->
        <available file="README"
                   filepath="${build.dir}/${extension.name}"
                   property="gnu.readme.extension.exists"/>

        <available file="README"
                   filepath="${build.dir}/${extension.name}/packages/${extension.name}_extension/ezextension/${extension.name}"
                   property="gnu.readme.package.exists"/>

        <if>
            <and>
                <equals arg1="gnu.readme.extension.exists" arg2="false"/>
                <equals arg1="gnu.readme.package.exists"   arg2="false"/>
            </and>
            <then>
                <fail message="README file doesn't exist!"/>
            </then>
        </if>
    </target>

    <!-- Generates an XML definition for eZ Publish extension package types       -->
    <!-- Only useful if you want to build your extension as an eZ Publish package -->
    <target name="generate-ezpackage-xml-definition" description="Generates an XML definition for eZ Publish extension package types">
        <available file="packages/${extension.name}_extension/ezextension/${extension.name}"
                   filepath="${build.dir}"
                   property="ezpackage.xml.exists"/>

            <if>
                <equals arg1="${ezpackage.xml.exists}" arg2="true"/>
                <then>
                    <echo message="Building XML file list for extension ${extension.name}"/>

                    <get src="http://svn.projects.ez.no/ezextensionbuilder/trunk/ezpxmlextfilelist.php"
                        file="ezpxmlextfilelist.php"
                        usetimestamp="true"/>

                    <apply executable="${php.cli.executable.path}" failonerror="true">
                        <arg value="ezpxmlextfilelist.php"/>
                        <arg value="-e"/>
                        <arg value="${build.dir}/packages/${extension.name}_extension/ezextension/${extension.name}"/>
                        <arg value="-n"/>
                        <arg value="${extension.name}"/>
                        <redirector output="${build.dir}/packages/${extension.name}_extension/ezextension/extension-${extension.name}.xml" append="false"/>
                    </apply>
                </then>
                <else>
                    <echo message="No packages found no need to generate anything"/>
                </else>
            </if>
    </target>

    <!-- Updates package.xml version numbers          -->
    <!-- This is mainly useful for eZFlow and eZWebin -->
    <target name="update-package-xml" description="Updates version numbers in package.xml">
        <echo message="Updating package.xml with correct version numbers"/>

        <!-- <version>xxx</version> -->
        <replaceregexp byline="true" flags="m">
            <regexp pattern='^(    \074version\076)(.*)(\074/version\076)$'/>
            <substitution expression='\1${ezp.version.major}.${ezp.version.minor}.${ezp.version.release}\3'/>
            <fileset dir="${build.dir}" includes="**/*package.xml"/>
        </replaceregexp>

        <!-- <named-version>xxx</named-version> -->
        <replaceregexp byline="true" flags="m">
            <regexp pattern='^(    \074named-version\076)(.*)(\074/named-version\076)$'/>
            <substitution expression='\1${ezp.version.major}.${ezp.version.minor}\3'/>
            <fileset dir="${build.dir}" includes="**/*package.xml"/>
        </replaceregexp>

        <!-- <package version="zzzz" -->
        <replaceregexp byline="true">
            <regexp pattern='^(\074package version=")(.*)(")$'/>
            <substitution expression='\1${version.major}.${version.minor}-${version.release}\3'/>
            <fileset dir="${build.dir}" includes="**/*package.xml"/>
        </replaceregexp>

        <!-- <number>xxxx</number> -->
        <replaceregexp byline="true">
            <regexp pattern='^(    \074number\076)(.*)(\074/number\076)$'/>
            <substitution expression='\1${version.alias}\3'/>
            <fileset dir="${build.dir}" includes="**/*package.xml"/>
        </replaceregexp>

        <!-- <release>yyy</release> -->
        <replaceregexp byline="true">
            <regexp pattern='^(    \074release\076)(.*)(\074/release\076)$'/>
            <substitution expression='\1${version.release}\3'/>
            <fileset dir="${build.dir}" includes="**/*package.xml"/>
        </replaceregexp>
    </target>

    <!-- Build dependant extensions                                                           -->
    <!-- In order to add a new dependency                                                     -->
    <!-- You must add the following properties                                                -->
    <!-- in your current extension                                                            -->
    <!-- external.dependency.<extension-name>.repository = http://url/to/ext/repository       -->
    <!--                                                                                      -->
    <!-- The build system expects the dependant extension follow the same directory structure -->
    <!-- as described in the README file                                                      -->
    <target name="build-dependencies" depends="ivy-resolve-dependencies" description="Build dependent extensions">

        <!-- fetches the list of available dependencies -->
        <!-- \1 : extension name -->
        <propertyselector property="dependency.list"
                                delimiter=","
                                match="external.dependency.([^\.]*)"
                                select="\1"
                                casesensitive="false" />

        <echo message="${dependency.list}"/>

        <foreach list="${dependency.list}"
                 delimiter=","
                 target="-build-dependency"
                 param="dependant.extension.name"/>
    </target>

    <!-- Note this is a private target !!! -->
    <target name="-build-dependency" description="Builds a dependency">
        <echo message="Building dependant extension : ${dependant.extension.name}"/>

        <delete dir="${build.dir}/packages"/>

        <propertycopy name="dependant.extension.repository" from="external.dependency.${dependant.extension.name}.repository"/>

        <!-- downloading build file -->
        <get src="${dependant.extension.repository}/build.xml"
             dest="${dependant.extension.name}-build.xml"/>

        <!-- downloading properties file -->
        <get src="${dependant.extension.repository}/ant/${dependant.extension.name}.properties"
             dest="ant/${dependant.extension.name}.properties"/>

        <ant antfile="${dependant.extension.name}-build.xml"
             dir="."
             target="all"
             inheritAll="true"/>

        <delete file="ant/${dependant.extension.name}.properties"/>

        <delete file="${dependant.extension.name}-build.xml"/>
    </target>

    <!-- ==================== -->
    <!-- Ivy specific targets -->
    <!-- ==================== -->

    <!-- Downloads Ivy from web site so that it            -->
    <!-- can be used even without any special installation -->
    <target name="ivy-download" unless="offline" description="Downloads Ivy">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!-- try to load ivy here from ivy home, in case the user has not already dropped   -->
    <!-- it into ant's lib dir (note that the latter copy will always take precedence). -->
    <!-- We will not fail as long as local lib dir exists (it may be empty) and         -->
    <!-- ivy is in at least one of ant's lib dir or the local lib dir.                  -->
    <target name="ivy-init" depends="ivy-download" description="Install Ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>

        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant"
                 classpathref="ivy.lib.path"/>
    </target>

    <!-- Retrieves dependencies with Ivy -->
    <target name="ivy-resolve-dependencies" depends="ivy-init" unless="offline" description="Retrieves dependencies with ivy">
        <get src="http://svn.projects.ez.no/ezextensionbuilder/trunk/ivy.xml"
             dest="ivy.xml"
             usetimestamp="true"/>

        <ivy:resolve file="ivy.xml"/>
        <ivy:retrieve pattern="${user.home}/.ant/lib/[artifact]-[revision]-[type].[ext]"/>

        <!-- Required by ant-contrib             -->
        <!-- http://ant-contrib.sourceforge.net/ -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    </target>

    <!-- ===================== -->
    <!-- /Ivy specific targets -->
    <!-- ===================== -->

</project>